# -*- coding: utf-8 -*-
"""SalesForecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15zTRJhJBWLwcu2G7bQgcfhjYwV42gUKf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
from xgboost import XGBRegressor
import joblib

# Better plots
plt.style.use('seaborn-v0_8-darkgrid')

# Load dataset
df = pd.read_csv('/content/sales_data_sample.csv', encoding='latin1')

# Show shape & head
print(f"Data shape: {df.shape}")
df.head()

# Show info & stats
print(df.info())
print(df.describe())

# Count missing values
missing_counts = df.isnull().sum()
missing_percent = (missing_counts / len(df)) * 100

# Combine into DataFrame for clarity
missing_df = pd.DataFrame({
    'Missing Values': missing_counts,
    'Percentage (%)': missing_percent.round(2)
})

# Filter only columns with missing values
missing_df = missing_df[missing_df['Missing Values'] > 0]

print("ðŸ“‹ Columns with missing values:")
print(missing_df)

# Drop high-missing columns not useful for forecasting
df = df.drop(columns=['ADDRESSLINE2', 'STATE', 'TERRITORY'])

#Fill missing POSTALCODE with 'Unknown'
df['POSTALCODE'] = df['POSTALCODE'].fillna('Unknown')

print("âœ… Cleaned data: dropped ADDRESSLINE2, STATE, TERRITORY; filled POSTALCODE with 'Unknown'")

df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])
df['Month'] = df['ORDERDATE'].dt.to_period('M')

monthly_sales = df.groupby('Month')['SALES'].sum().reset_index()
monthly_sales['Month'] = monthly_sales['Month'].dt.to_timestamp()

# Plot sales over time
plt.figure(figsize=(12,5))
plt.plot(monthly_sales['Month'], monthly_sales['SALES'], marker='o')
plt.title('ðŸ“ˆ Monthly Total Sales')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

monthly_sales['Month_num'] = np.arange(len(monthly_sales)) + 1
monthly_sales['Month_of_year'] = monthly_sales['Month'].dt.month
monthly_sales['Quarter'] = monthly_sales['Month'].dt.quarter

monthly_sales.tail()

df_prophet = monthly_sales[['Month', 'SALES']].rename(columns={'Month': 'ds', 'SALES': 'y'})

train_df_prophet = df_prophet[:-6]
test_df_prophet = df_prophet[-6:]

prophet_model = Prophet()
prophet_model.fit(train_df_prophet)

future = prophet_model.make_future_dataframe(periods=6, freq='M')
forecast = prophet_model.predict(future)
forecast_test = forecast[-6:]

fig = prophet_model.plot(forecast)
plt.title('ðŸ“Š Prophet Forecast')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()

mse_p = mean_squared_error(test_df_prophet['y'], forecast_test['yhat'])
mae_p = mean_absolute_error(test_df_prophet['y'], forecast_test['yhat'])
mape_p = mean_absolute_percentage_error(test_df_prophet['y'], forecast_test['yhat'])

print("âœ… Prophet Performance:")
print(f"MSE: {mse_p:.0f} | MAE: {mae_p:.0f} | MAPE: {mape_p:.2%}")

# One-hot encode categorical features
monthly_sales_encoded = pd.get_dummies(monthly_sales, columns=['Month_of_year', 'Quarter'])

feature_cols = [c for c in monthly_sales_encoded.columns if c not in ['Month', 'SALES']]
X = monthly_sales_encoded[feature_cols]
y = monthly_sales_encoded['SALES']

X_train, X_test = X[:-6], X[-6:]
y_train, y_test = y[:-6], y[-6:]

xgb_model = XGBRegressor(n_estimators=100, random_state=42)
xgb_model.fit(X_train, y_train)

predictions_xgb = xgb_model.predict(X_test)

mse_xgb = mean_squared_error(y_test, predictions_xgb)
mae_xgb = mean_absolute_error(y_test, predictions_xgb)
mape_xgb = mean_absolute_percentage_error(y_test, predictions_xgb)

print("âœ… XGBoost Performance:")
print(f"MSE: {mse_xgb:.0f} | MAE: {mae_xgb:.0f} | MAPE: {mape_xgb:.2%}")

plt.figure(figsize=(14,6))
plt.plot(monthly_sales['Month'][-6:], y_test.values, label='Actual', marker='o')
plt.plot(forecast_test['ds'], forecast_test['yhat'], label='Prophet Predicted', marker='o')
plt.plot(monthly_sales['Month'][-6:], predictions_xgb, label='XGBoost Predicted', marker='o')
plt.title('ðŸ“Š Actual vs Prophet vs XGBoost (Test Period)')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.legend()
plt.show()

plt.figure(figsize=(8,6))
sns.barplot(x=xgb_model.feature_importances_, y=feature_cols)
plt.title('XGBoost Feature Importance')
plt.show()

joblib.dump(prophet_model, 'prophet_model.pkl')
joblib.dump(xgb_model, 'xgboost_sales_forecast.pkl')
print("âœ… Models saved: prophet_model.pkl & xgboost_sales_forecast.pkl")

results = pd.DataFrame({
    'Model': ['Prophet', 'XGBoost'],
    'MSE': [mse_p, mse_xgb],
    'MAE': [mae_p, mae_xgb],
    'MAPE': [mape_p, mape_xgb]
})

print("ðŸ“Š Comparative Results:")
print(results)

print("""
âœ… XGBoost performs better due to:
- Nonlinear spikes modeling
- Use of calendar features
- Handles few data points better

ðŸŽ‰ Prophet is good at smooth seasonal trends, but struggles with large spikes.
""")

